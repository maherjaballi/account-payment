# -*- coding: utf-8 -*-
import openerp
from openerp import api, fields, models, _

class ResConfigSettings(models.TransientModel):
    _inherit = 'res.config.settings'
    
    module_account_cash_invoice = fields.Boolean(string='Account cash Invoice',
        help='This modules allows to pay an existing Supplier Invoice / Customer Refund, or \n'
              'to collect payment for an existing Customer Invoice from a Cash Statement. \n'
             '-This installs the module account_cash_invoice.')
    
    module_account_check_printing_report_base = fields.Boolean(string='Account Check Printing Report Base',
        help='This module provides the basic framework for check printing, and a sample \n'
              'layout. \n')

    module_account_due_list = fields.Boolean(string='Account Due List',
        help='This module adds a due list of pending payments. The list contains every \n'
              'expected payment, generated by invoices or by intermediate moves (for example, \n'
              'generated by payment/direct debit orders with the module \n'
              '*account_banking_payment_transfer*). The list is fully filterable. \n')
    
    module_account_due_list_aging_comment = fields.Boolean(string='aAccount Due List Aging Comment',
        help='This module extends the Payments and Due list to add the capability to introduce aging comments in-line.\n')

    module_account_due_list_days_overdue = fields.Boolean(string='Account Due List Days Overdue',
        help='This module adds to the Payments and due list view the number of days that \n'
              'an open item is overdue, and classifies the amount due in separate terms \n'
              'columns  (e.g. 1-30, 31-60, +61). \n'
              'The terms columns to show in the list and the number of days for within each \n'
              'term can be configured. \n')

    module_account_due_list_payment_mode = fields.Boolean(string='Account Due List Payment Mode',
        help='This module adds a field to the due list of pending payments: \n'
              '* the *Payment Mode* of invoices on account move lines. \n')

    module_account_move_line_auto_reconcile_hook = fields.Boolean(string='Account Move Line Auto Reconcile Hook',
        help='This module adds a hook to the function auto_reconcile_lines in \n'
                'account move line model. \n')

    module_account_payment_credit_card = fields.Boolean(string='Account Payment Credit Card',
        help='This module provides a way to record Credit Card purchases and to pay them the same way regular purchases  \n'
              'are recorded (via Vendor Bills) and paid (via Vendor Payments). \n'

              'By default, if vendor bills are used to record credit card purchases, the liability (AP) \n' 
              'from the supplier/vendor must be moved to the credit card company via a manual journal entry. \n'

              'Because a journal entry contains less information than a vendor bill, there may be a loss of information \n'
               'that affects book keeping accuracy and the ability to properly reconcile the AP amount when the credit card \n'
                'statement arrives and needs to be settled. \n'
              'This method also requires an additional step not needed when a vendor bill is paid via bank or cash. \n'

              'This module automates the creation of the manual journal entry required to move the AP to the credit card company, \n'
               'retains all information about the purchase in an invoice document, and leverages the standard \n' 
               'purchase and payment workflow already in place for bank and cash payments \n'

              'It supports as many Credit Cards as are needed, configured in the same way an additional \n'
               'payment method would be (i.e. via the creation of a new journal). \n'

              'To settle a Credit Card statement, the regular workflow to record a vendor payment \n' 
              'is used â€“ allowing the removal of charges not included in the statement. \n'
              'Non-purchase transactions like fees for annual membership, balance transfers, cash advances and foreign transactions; \n' 
              'as well as charges for late payments and returned checks; \n' 
              'can be entered either as Vendor Invoices or manual Journal Entries as users elect \n'

              'Both of these methods will allow these items to be settled when making a payment to the credit card company. \n'

              'This module also supports payment cancellation and re-entry (in the case a mistaken amount is entered) \n' 
              'as well as refunds (where the purchase is returned and a credit from the credit card company will be issued). \n')

    module_account_payment_residual_amount = fields.Boolean(string='Account Payment Residual Amount',
        help='This module allows a user to display the amount from a payment that has not \n'
              'yet been reconciled (called the residual amount). \n')

    module_account_payment_return = fields.Boolean(string='Account Payment Return',
        help='This module implements customer receivables returns and allows to send \n'
              'related reconciled account move lines back to a state where the debt is still \n'
              'open, and letting history of it. \n'
              'This module can be extended adding importers that automatically fills the \n'
              'full returned payment record. \n')

    module_account_payment_return_import = fields.Boolean(string='Account Payment Return Import',
        help='This module adds a generic wizard + methods to import payment return file \n'
              'formats. \n'
              'Its a base to be extended by another modules though it allows to import a csv \n'
              'that will proccess the return payments on it. \n'
              'Multiple payment return files contained in a zip are also supported. \n')

    module_account_payment_return_import_iso20022 = fields.Boolean(string='Account Payment Return Import Iso20022',
        help='Module to import payment returns from pain.002.001.03 and camt.054.001.02 files. \n')

    module_account_payment_show_invoice = fields.Boolean(string='Account Payment Show Invoice',
        help='To use this module, you need to: \n'
              '#. Go to Invoicing > Vendors > Payments or to Invoicing > Customers > \n'
                 'Payments \n'
              '#. There you can see a new column *Invoices*. \n')

    module_account_payment_widget_amount = fields.Boolean(string='Account Payment Widget Amount',
        help='This module adds a popover widget in the invoice form view when there \n'
              'are outstanding payments that allows the user to select the amount \n'
              'of the selected payment that wants to assign to the invoice. \n')

    module_account_voucher_killer = fields.Boolean(string='Account Voucher Killer',
        help='This add-on disables the "Register Payment" button on \n'
              'customer invoices and vendor bills. \n'
              'It also disables the payments-related menus entries such as \n'
              '"Customer Payments", "Supplier Payments" \n'
              'More precisely, this module adds a group "Payments for Invoices" \n'
              'and only users in that group see these buttons and menus. \n')

    module_partner_aging = fields.Boolean(string='Partner Aging',
        help='This module creates new customer / supplier aging as of a given date. \n'
              'The default Aged Partner balance report is related to specific date and a \n'
              'static PDF that is based on the difference between credits and debits, not \n'
              'based on documents such as Invoices and Payments. \n'
              'This module provides an interactive view with details of the invoice. \n'
              'This module does not consider unapplied credits. \n')


   